{"version":3,"sources":["api.ts","store/filter.ts","store/todos.ts","store/selectedTodo.ts","store/index.ts","components/Loader/Loader.tsx","components/TodoList/TodoList.tsx","components/TodoModal/TodoModal.tsx","components/TodoFilter/TodoFilter.tsx","App.tsx","index.tsx"],"names":["get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","FilterActionType","TodosActionType","actions","filterBy","type","SelectTodos","payload","query","SetQuery","selector","state","filteringBy","initialState","filterReduser","action","SET_SELECTED_TODO","SetSelectedTodoActionCreator","selectedTodo","selectedTodoReduser","StartLoadingTodos","todos","SetTodos","FinishLoadingTodos","error","ErrorLoading","isLoading","err","todosReduser","dispatch","todosActions","catch","finally","rootReducer","combineReducers","todosState","filter","selectors","todosSelectors","filterSelectors","store","createStore","composeWithDevTools","applyMiddleware","thunk","Loader","className","TodoList","useSelector","selectedTodoID","despatch","useDispatch","visibleTodos","useMemo","todo","title","completed","includes","toLowerCase","map","id","cn","onClick","TodoModal","decpatch","useState","userInfo","setUserInfo","find","userId","useEffect","getUser","href","email","name","TodoFilter","value","onChange","target","placeholder","length","style","pointerEvents","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.97ae8421.chunk.js","sourcesContent":["import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(1000)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import { Action as BaseAction } from 'redux';\n\nexport type FilterByType = 'all' | 'active' | 'completed';\n\nexport enum FilterActionType {\n  SelectTodos = 'filter/SELECT_TODOS',\n  SetQuery = 'filter/SET_QUERY',\n}\n\nexport interface Action<T, P> extends BaseAction<T> {\n  payload: P,\n}\n\ntype SelectTodosAction = Action<FilterActionType.SelectTodos, FilterByType>;\ntype SetQueryAction = Action<FilterActionType.SetQuery, string>;\n\nexport type FilterAction = SelectTodosAction | SetQueryAction;\n\nexport const actions = {\n  selectTodosActionCreator: (filterBy: FilterByType): SelectTodosAction => ({\n    type: FilterActionType.SelectTodos,\n    payload: filterBy,\n  }),\n  setQueryActionCreator: (query: string): SetQueryAction => ({\n    type: FilterActionType.SetQuery,\n    payload: query,\n  }),\n};\n\nexport interface FilterState {\n  filteringBy: FilterByType,\n  query: string,\n}\n\nexport const selector = {\n  getQuery: (state: FilterState): string => state.query,\n  getfilteringBy: (state: FilterState): FilterByType => state.filteringBy,\n};\n\nconst initialState: FilterState = {\n  filteringBy: 'all',\n  query: '',\n};\n\nconst filterReduser = (\n  state = initialState,\n  action: FilterAction,\n) => {\n  switch (action.type) {\n    case FilterActionType.SelectTodos:\n      return {\n        ...state,\n        filteringBy: action.payload,\n      };\n\n    case FilterActionType.SetQuery:\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReduser;\n","import { Action as BaseAction } from 'redux';\nimport { Todo } from '../types/Todo';\n\nexport enum TodosActionType {\n  StartLoadingTodos = 'todos/START_LOADING_TODOS',\n  SetTodos = 'todos/SET_TODOS',\n  FinishLoadingTodos = 'todos/FINISH_LOADING_TODOS',\n  ErrorLoading = 'todos/ERROR_LOADING',\n}\n\nexport interface Action<T, P> extends BaseAction<T> {\n  payload: P,\n}\n\ntype StartLoadingTodosAction = BaseAction<TodosActionType.StartLoadingTodos>;\ntype SetTodosAction = Action<TodosActionType.SetTodos, Todo[]>;\ntype FinishLoadingTodos = BaseAction<TodosActionType.FinishLoadingTodos>;\ntype ErrorLoadingAction = Action<TodosActionType.ErrorLoading, string>;\n\nexport type TodosAction = StartLoadingTodosAction | SetTodosAction\n| FinishLoadingTodos | ErrorLoadingAction;\n\nexport const actions = {\n  startLoadingTodosActionCreator: (): StartLoadingTodosAction => ({\n    type: TodosActionType.StartLoadingTodos,\n  }),\n  setTodosActionCreator: (todos: Todo[]): SetTodosAction => ({\n    type: TodosActionType.SetTodos,\n    payload: todos,\n  }),\n  finishLoadingTodosCreator: (): FinishLoadingTodos => ({\n    type: TodosActionType.FinishLoadingTodos,\n  }),\n  errorLoadingActionCreator: (error: string): ErrorLoadingAction => ({\n    type: TodosActionType.ErrorLoading,\n    payload: error,\n  }),\n};\n\nexport interface TodosState {\n  todos: Todo[],\n  isLoading: boolean,\n  err: string,\n}\n\nexport const selector = {\n  getIsLoading: (state: TodosState): boolean => state.isLoading,\n  getTodos: (state: TodosState): Todo[] => state.todos,\n};\n\nconst initialState: TodosState = {\n  todos: [],\n  isLoading: false,\n  err: '',\n};\n\nconst todosReduser = (\n  state = initialState,\n  action: TodosAction,\n) => {\n  switch (action.type) {\n    case TodosActionType.StartLoadingTodos:\n      return {\n        ...state,\n        isLoading: true,\n      };\n\n    case TodosActionType.SetTodos:\n      return {\n        ...state,\n        todos: action.payload,\n      };\n\n    case TodosActionType.FinishLoadingTodos:\n      return {\n        ...state,\n        isLoading: false,\n      };\n\n    case TodosActionType.ErrorLoading:\n      return {\n        ...state,\n        err: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReduser;\n","export const SET_SELECTED_TODO = 'todo/SET_SELECTED_TODO';\n\ntype SetSelectedTodoAction = {\n  type: string;\n  payload: number | null;\n};\nexport type SelectedTodo = number | null;\n\nexport const SetSelectedTodoActionCreator = (selectedTodo: SelectedTodo) => ({\n  type: SET_SELECTED_TODO,\n  payload: selectedTodo,\n});\n\nexport const getSelectedTodo = (state: SelectedTodo): SelectedTodo => state;\n\nconst initialState: SelectedTodo = null;\n\nconst selectedTodoReduser = (\n  state = initialState,\n  action: SetSelectedTodoAction,\n) => {\n  if (action.type === SET_SELECTED_TODO) {\n    return action.payload;\n  }\n\n  return state;\n};\n\nexport default selectedTodoReduser;\n","import { Dispatch } from 'react';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { getTodos } from '../api';\nimport { Todo } from '../types/Todo';\nimport filterReduser, { selector as filterSelectors } from './filter';\nimport selectedTodoReduser, { getSelectedTodo } from './selectedTodo';\nimport todosReduser, {\n  actions as todosActions,\n  selector as todosSelectors,\n  TodosAction,\n} from './todos';\n\nexport const action = {\n  uploadTodos() {\n    return (dispatch: Dispatch<TodosAction>) => {\n      dispatch(todosActions.startLoadingTodosActionCreator());\n\n      getTodos()\n        .then(res => dispatch(todosActions.setTodosActionCreator(res)))\n        .catch(err => dispatch(todosActions.errorLoadingActionCreator(err)))\n        .finally(() => dispatch(todosActions.finishLoadingTodosCreator()));\n    };\n  },\n};\n\nconst rootReducer = combineReducers({\n  todosState: todosReduser,\n  selectedTodo: selectedTodoReduser,\n  filter: filterReduser,\n});\n\ntype RootState = ReturnType<typeof rootReducer>;\n\nexport const selectors = {\n  getLoadingInfo: (state: RootState): boolean => todosSelectors\n    .getIsLoading(state.todosState),\n  getTodos: (state: RootState): Todo[] => todosSelectors\n    .getTodos(state.todosState),\n  getSelectedTodo: (state: RootState) => getSelectedTodo(state.selectedTodo),\n  getQuery: (state: RootState) => filterSelectors.getQuery(state.filter),\n  getFilterBy: (state: RootState) => filterSelectors\n    .getfilteringBy(state.filter),\n};\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useMemo } from 'react';\nimport cn from 'classnames';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectors } from '../../store';\nimport { SetSelectedTodoActionCreator } from '../../store/selectedTodo';\n// import { Todo } from '../../types/Todo';\n\nexport const TodoList: React.FC = () => {\n  const todos = useSelector(selectors.getTodos);\n  const selectedTodoID = useSelector(selectors.getSelectedTodo);\n  const despatch = useDispatch();\n\n  const filteringBy = useSelector(selectors.getFilterBy);\n  const query = useSelector(selectors.getQuery);\n\n  const visibleTodos = useMemo(() => (\n    todos.filter(todo => {\n      const { title, completed } = todo;\n\n      if (!title.includes(query.toLowerCase())) {\n        return false;\n      }\n\n      return filteringBy === 'all'\n        ? true\n        : completed === (filteringBy === 'completed');\n    })\n  ), [todos, filteringBy, query]);\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {visibleTodos.map(({ id, title, completed }) => (\n          <tr\n            data-cy=\"todo\"\n            key={id}\n            className={cn({\n              'has-background-info-light': selectedTodoID === id,\n            })}\n          >\n            <td className=\"is-vcentered\">{id}</td>\n            <td className=\"is-vcentered\">\n              {completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p className={`has-text-${completed ? 'success' : 'danger'}`}>\n                {title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => despatch(SetSelectedTodoActionCreator(id))}\n              >\n                <span className=\"icon\">\n                  <i className={\n                    `far fa-eye${selectedTodoID === id ? '-slash' : ''}`\n                  }\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React, { useEffect, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectors } from '../../store';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { SetSelectedTodoActionCreator } from '../../store/selectedTodo';\n\nexport const TodoModal: React.FC = () => {\n  const todos = useSelector(selectors.getTodos);\n  const selectedTodoID = useSelector(selectors.getSelectedTodo);\n  const decpatch = useDispatch();\n  const [userInfo, setUserInfo] = useState<User | null>(null);\n\n  const {\n    id,\n    title,\n    completed,\n    userId,\n  } = useMemo(() => todos.find(todo => todo.id === selectedTodoID) as Todo,\n    [selectedTodoID, todos]);\n\n  useEffect(() => {\n    getUser(userId)\n      .then(setUserInfo);\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!userInfo ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => decpatch(SetSelectedTodoActionCreator(null))}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed\n                ? (<strong className=\"has-text-success\">Done</strong>)\n                : (<strong className=\"has-text-danger\">Planned</strong>)}\n\n              {' by '}\n\n              <a href={`mailto:${userInfo.email}`}>\n                {userInfo.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { FC } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { actions, FilterByType } from '../../store/filter';\nimport { selectors } from '../../store/index';\n\nexport const TodoFilter: FC = () => {\n  const filteringBy = useSelector(selectors.getFilterBy);\n  const query = useSelector(selectors.getQuery);\n  const dispatch = useDispatch();\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filteringBy}\n            onChange={({ target }) => dispatch(\n              actions.selectTodosActionCreator(target.value as FilterByType),\n            )}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={({ target }) => dispatch(\n            actions.setQueryActionCreator(target.value),\n          )}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {!!query.length && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => dispatch(actions.setQueryActionCreator(''))}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { action, selectors } from './store';\nimport { Loader } from './components/Loader';\nimport { TodoList } from './components/TodoList';\nimport { TodoModal } from './components/TodoModal';\nimport { TodoFilter } from './components/TodoFilter';\n\nexport const App = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectors.getLoadingInfo);\n  const selectedTodoID = useSelector(selectors.getSelectedTodo);\n\n  useEffect(() => {\n    dispatch(action.uploadTodos());\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? (<Loader />)\n                : (\n                  <TodoList />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodoID && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}